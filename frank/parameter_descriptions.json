{
  "input_output" : {
    "uvtable_filename" : "UVTable with data to be fit (columns: u [\\lambda], v [\\lambda], Re(V) [Jy], Im(V) [Jy], weights [Jy^-2])",
    "save_dir"         : "Directory in which output datafiles and figures are saved",
    "save_solution"    : "Whether to save `sol` object (see frank.radial_fitters.FrankFitter)",
    "save_profile_fit" : "Whether to save fitted brightness profile",
    "save_vis_fit"     : "Whether to save fitted visibility distribution",
    "save_uvtables"    : "Whether to save fitted and residual UV tables (these are reprojected)",
    "iteration_diag"   : "Whether to return and save diagnostics of the fit iteration (needed for diag_plot)",
    "format"           : "Output file format. Default is the same as for 'uvtable_filename', else choose from 'npz' or 'txt'"
  },

  "modify_data" : {
    "baseline_range"   : "(Deprojected) baseline range outside of which visibilities are truncated, unit=[\\lambda]",
    "correct_weights"  : "Whether to estimate the data's weights (as they may be unknown for mock data)",
    "use_median_weight": "Whether to estimate all weights as the median binned visibility variance (or instead estimate weights using the baseline-dependent variance)",
    "norm_wle"         : "Wavelength (unit=[m]) by which to normalize the (u, v) points (i.e., convert from [m] to [rad]). Not needed if the (u, v) points are already in units of [\\lambda]"
  },

  "geometry" : {
    "type"             : "How the geometry is determined: 'known' if user-supplied, 'gaussian' to fit it with a gaussian, 'nonparametric' to fit it nonparametrically",
    "fit_phase_offset" : "Whether to fit for the phase center",
    "fit_inc_pa"       : "Whether to fit for the inclination and position angle",
    "initial_guess"    : "Whether to use the below values of `inc`, `pa`, `dra`, and `ddec` as an initial guess for the geometry (if `fit_phase_offset` is True or `fit_inc_pa` is True, the respective values below will be used. Guess is only used if `type` is 'gaussian' or 'nonparametric')",
    "inc"              : "Inclination, unit=[deg]",
    "pa"               : "Position angle, defined east of north, unit=[deg]",
    "dra"              : "Delta (offset from 0) right ascension, defined positive for offsets toward east, unit=[arcsec]",
    "ddec"             : "Delta declination, unit=[arcsec]",
    "rescale_flux"     : "Whether to rescale the total flux to account for the source's inclination (see frank.geometry.rescale_total_flux)"
  },

  "hyperparameters" : {
    "n"                : "Number of collocation points used in the fit (suggested range 100 - 300)",
    "rout"             : "Maximum disc radius in the fit (best to overestimate size of source), unit=[arcsec]",
    "alpha"            : "Order parameter for the power spectrum's inverse Gamma prior (suggested range 1.00 - 1.50). If a list, multiple fits will be performed and overplotted.",
    "p0"               : "Scale parameter for the power spectrum's inverse Gamma prior (suggested >0, <<1). If 'null', the code will internally choose a sensible value.",
    "wsmooth"          : "Strength of smoothing applied to the power spectrum (suggested range 10^-4 - 10^-1). If a list, multiple fits will be performed and overplotted.",
    "iter_tol"         : "Tolerance for fit iteration stopping criterion (suggested <<1)",
    "max_iter"         : "Maximum number of fit iterations",
    "nonnegative"      : "Whether frank provides the mean (if false) or best fit nonnegative solution",
    "method"           : "The fit method: 'Normal' to fit in linear brighness, 'LogNormal' to fit in logarithmic brightness"
  },

  "plotting" : {
    "quick_plot"       : "Whether to make a figure showing the simplest plots of the fit",
    "full_plot"        : "Whether to make a figure more fully showing the fit and its diagnostics",
    "diag_plot"        : "Whether to make a diagnostic figure showing fit convergence metrics",
    "deprojec_plot"    : "Whether to make a figure showing the effect of deprojection on the (u, v) points and visibilities",
    "distance"         : "Distance to source, optionally used for plotting, unit=[pc]",
    "force_style"      : "Whether to use preconfigured matplotlib rcParams in generated figures",
    "bin_widths"       : "Bin widths in which to bin the observed visibilities, list of float or int, unit=[\\lambda]",
    "stretch"          : "Type of stretch to apply to swept profile image colormaps, either 'power' or 'asinh'",
    "gamma"            : "Index of power law normalization to apply to swept profile image colormaps (1.0 = linear scaling)",
    "asinh_a"          : "Scale parameter for an arcsinh normalization to apply to swept profile image colormaps",
    "iter_plot_range"  : "Range of iterations to be plotted in the diagnostic figure, list of int of the form [start, stop]",
    "plot_in_logx"     : "Whether to plot visibility distributions in log(baseline) in 'quick_plot' and 'full_plot'",
    "norm_residuals"   : "Whether to normalize plotted visibility residuals in 'full_plot'"
  },

  "analysis" : {
    "compare_profile"  : "Path of file with comparison profile to be overplotted with frank fit (.txt or .dat). Columns: r [arcsec], I [Jy / sr], optional 3rd column with a single error [Jy / sr] or optional 3rd and 4th columns with lower and upper errors",
    "clean_beam"       : "Dictionary of B_major [arcsec], B_minor [arcsec], position angle [deg] of beam to convolve frank profile",
    "bootstrap_ntrials": "Number of trials (dataset realizations) to perform in a bootstrap analysis",

  }
}
